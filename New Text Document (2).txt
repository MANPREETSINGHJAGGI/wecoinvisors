# PLAN (pseudocode)
# 1) Tech Stack
# - Next.js (App Router) + TypeScript + Tailwind
# - Serverless routes for market data proxy and AI analysis
# - Lightweight Charts for candles, simple order book widget mock
# - SWR for data fetching
# - Deployed to Vercel; .env for API keys (ALPHAVANTAGE or POLYGON, OPENAI)
#
# 2) Pages/Routes
# - / : Ticker search + chart + OHLC + watchlist
# - /api/quote : proxy to data provider (Alpha Vantage demo or Polygon). Caches responses
# - /api/candles : historical candles
# - /api/news : fetch recent news by symbol (provider optional)
# - /api/ai-analyze : call OpenAI with ticker, latest quote, small set of news; return bullet analysis + risks + TL;DR
#
# 3) Components
# - TickerSearch: input with suggestions
# - PriceBoard: last price, change, volume
# - CandleChart: lightweight-charts wrapper
# - AIInsights: textarea+button showing AI output, streaming placeholder
# - Watchlist: localStorage persisted
#
# 4) Data Flow
# - Client uses SWR to hit /api/*; revalidate every N seconds
# - API routes call external providers with key from env; normalize shape
# - AI route composes a short context from quote+news and gets a response
#
# 5) Styling & UX
# - Minimal dark theme, responsive grid
# - Keyboard enter triggers search
# - Error states & loading skeletons
#
# 6) Deployment
# - `vercel` with env: DATA_API_KEY, DATA_PROVIDER, OPENAI_API_KEY
# - Render: same; Squarespace: embed via iframe hitting a deployed instance; GH Pages: not ideal for serverless; use static export without AI or connect to external APIs via netlify functions


// FILE: package.json
{
  "name": "ai-stock-app",
  "private": true,
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "ai": "^3.3.9",
    "class-variance-authority": "^0.7.0",
    "lucide-react": "^0.468.0",
    "lightweight-charts": "^4.2.0",
    "next": "^14.2.5",
    "openai": "^4.57.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "swr": "^2.3.0"
  },
  "devDependencies": {
    "@types/node": "^20.12.12",
    "@types/react": "^18.2.79",
    "@types/react-dom": "^18.2.25",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.5.3"
  }
}

// FILE: next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: { serverActions: true }
};
export default nextConfig;

// FILE: tailwind.config.ts
import type { Config } from "tailwindcss";
const config: Config = {
  darkMode: "class",
  content: ["./app/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"]
};
export default {
  ...config,
  theme: { extend: {} },
  plugins: []
};

// FILE: postcss.config.js
module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } };

// FILE: app/globals.css
@tailwind base;@tailwind components;@tailwind utilities;
:root{color-scheme:dark;}
body{ @apply bg-zinc-950 text-zinc-100; }

// FILE: app/layout.tsx
import "./globals.css";
import type { Metadata } from "next";
export const metadata: Metadata = { title: "AI Stock App", description: "TradingView-like charts + AI" };
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body className="min-h-screen">
        <div className="max-w-7xl mx-auto p-4">{children}</div>
      </body>
    </html>
  );
}

// FILE: lib/providers.ts
export type Provider = "alphavantage" | "polygon" | "stooq";
export const provider = (process.env.DATA_PROVIDER as Provider) || "alphavantage";
export const DATA_API_KEY = process.env.DATA_API_KEY || "demo"; // demo for AV

// FILE: app/api/quote/route.ts
import { NextRequest, NextResponse } from "next/server";
import { provider, DATA_API_KEY } from "@/lib/providers";

export const revalidate = 5;

export async function GET(req: NextRequest) {
  const symbol = req.nextUrl.searchParams.get("symbol") || "AAPL";
  try {
    let url: string;
    if (provider === "alphavantage") {
      url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${DATA_API_KEY}`;
    } else if (provider === "polygon") {
      url = `https://api.polygon.io/v2/aggs/ticker/${symbol}/prev?apiKey=${DATA_API_KEY}`;
    } else {
      url = `https://stooq.com/q/l/?s=${symbol}&f=sd2t2ohlcv&h&e=json`;
    }
    const r = await fetch(url, { next: { revalidate: 5 } });
    if (!r.ok) throw new Error(`Upstream ${r.status}`);
    const raw = await r.json();

    // normalize
    let data: any;
    if (provider === "alphavantage") {
      const q = raw["Global Quote"] || {};
      data = {
        symbol: q["01. symbol"] || symbol,
        price: Number(q["05. price"]) || 0,
        change: Number(q["09. change"]) || 0,
        changePercent: Number((q["10. change percent"] || "0").replace("%", "")) || 0,
        volume: Number(q["06. volume"]) || 0,
        ts: Date.now()
      };
    } else if (provider === "polygon") {
      const q = raw.results?.[0] || {};
      data = { symbol, price: q.c, change: 0, changePercent: 0, volume: q.v, ts: q.t };
    } else {
      const q = raw?.symbols?.[0] || {};
      data = { symbol: q.symbol, price: Number(q.close), change: 0, changePercent: 0, volume: Number(q.volume), ts: Date.now() };
    }

    return NextResponse.json({ ok: true, data });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e.message }, { status: 500 });
  }
}

// FILE: app/api/candles/route.ts
import { NextRequest, NextResponse } from "next/server";
import { provider, DATA_API_KEY } from "@/lib/providers";
export const revalidate = 60;
export async function GET(req: NextRequest) {
  const symbol = req.nextUrl.searchParams.get("symbol") || "AAPL";
  const interval = req.nextUrl.searchParams.get("interval") || "60min"; // AV format
  try {
    let url: string;
    if (provider === "alphavantage") {
      const fn = interval === "1min" ? "TIME_SERIES_INTRADAY" : "TIME_SERIES_INTRADAY";
      url = `https://www.alphavantage.co/query?function=${fn}&symbol=${symbol}&interval=${interval}&outputsize=compact&apikey=${DATA_API_KEY}`;
    } else if (provider === "polygon") {
      url = `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/5/minute/2024-01-01/2024-12-31?apiKey=${DATA_API_KEY}`;
    } else {
      url = `https://stooq.com/q/d/l/?s=${symbol}&i=d`;
      const csv = await (await fetch(url)).text();
      const rows = csv.split("\n").slice(1).filter(Boolean).slice(-200);
      const candles = rows.map((line) => {
        const [date, open, high, low, close, volume] = line.split(",");
        return { time: new Date(date).getTime() / 1000, open: +open, high: +high, low: +low, close: +close, volume: +volume };
      });
      return NextResponse.json({ ok: true, data: candles });
    }

    const r = await fetch(url, { next: { revalidate: 60 } });
    if (!r.ok) throw new Error(`Upstream ${r.status}`);
    const raw = await r.json();

    // AV intraday normalize
    const key = Object.keys(raw).find((k) => k.includes("Time Series"));
    const series = key ? raw[key] : {};
    const candles = Object.entries<any>(series)
      .slice(0, 300)
      .reverse()
      .map(([ts, v]) => ({
        time: Math.floor(new Date(ts).getTime() / 1000),
        open: +v["1. open"],
        high: +v["2. high"],
        low: +v["3. low"],
        close: +v["4. close"],
        volume: +v["5. volume"] || 0
      }));

    return NextResponse.json({ ok: true, data: candles });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e.message }, { status: 500 });
  }
}

// FILE: app/api/news/route.ts
import { NextRequest, NextResponse } from "next/server";
export async function GET(req: NextRequest) {
  const symbol = req.nextUrl.searchParams.get("symbol") || "AAPL";
  try {
    // placeholder using Hacker News Algolia as free demo for symbol keyword
    const r = await fetch(`https://hn.algolia.com/api/v1/search?query=${encodeURIComponent(symbol)}&tags=story&hitsPerPage=5`, { next: { revalidate: 300 } });
    const j = await r.json();
    const items = (j.hits || []).map((h: any) => ({ title: h.title, url: h.url, source: "HN", ts: h.created_at_i }));
    return NextResponse.json({ ok: true, data: items });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e.message }, { status: 500 });
  }
}

// FILE: app/api/ai-analyze/route.ts
import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";

export async function POST(req: NextRequest) {
  const body = await req.json().catch(() => ({}));
  const { symbol = "AAPL", quote, news } = body;
  try {
    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    if (!process.env.OPENAI_API_KEY) throw new Error("Missing OPENAI_API_KEY");

    const system = `You are an equity analyst. Be concise, avoid speculation, and never give financial advice. Output sections: Snapshot, Drivers, Risks, Technicals(brief), TL;DR (max 20 words).`;
    const user = `Symbol: ${symbol}\nQuote: ${JSON.stringify(quote)}\nNews: ${news?.map((n: any) => `- ${n.title}`).join("\n")}`;

    const res = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: system },
        { role: "user", content: user }
      ],
      temperature: 0.3
    });

    const text = res.choices[0]?.message?.content || "No analysis";
    return NextResponse.json({ ok: true, data: text });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e.message }, { status: 500 });
  }
}

// FILE: components/TickerSearch.tsx
"use client";
import { useState } from "react";
import { Search } from "lucide-react";

export default function TickerSearch({ onSelect }: { onSelect: (s: string) => void }) {
  const [v, setV] = useState("AAPL");
  return (
    <div className="flex gap-2 items-center">
      <div className="relative flex-1">
        <Search className="absolute left-3 top-2.5 h-4 w-4 text-zinc-400" />
        <input
          className="w-full bg-zinc-900 rounded-2xl pl-9 pr-4 py-2 outline-none border border-zinc-800"
          placeholder="Search ticker (AAPL, MSFT, RELIANCE.NS)"
          value={v}
          onChange={(e) => setV(e.target.value.toUpperCase())}
          onKeyDown={(e) => e.key === "Enter" && onSelect(v)}
        />
      </div>
      <button className="px-4 py-2 rounded-2xl bg-indigo-600" onClick={() => onSelect(v)}>Load</button>
    </div>
  );
}

// FILE: components/PriceBoard.tsx
"use client";
export default function PriceBoard({ q }: { q: any }) {
  const pct = q?.changePercent || 0;
  const dir = pct >= 0 ? "text-emerald-400" : "text-rose-400";
  return (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
      <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
        <div className="text-zinc-400 text-sm">Price</div>
        <div className="text-2xl font-semibold">{q?.price?.toFixed?.(2)}</div>
      </div>
      <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
        <div className="text-zinc-400 text-sm">Change</div>
        <div className={`text-2xl font-semibold ${dir}`}>{q?.change?.toFixed?.(2)} ({pct.toFixed?.(2)}%)</div>
      </div>
      <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
        <div className="text-zinc-400 text-sm">Volume</div>
        <div className="text-2xl font-semibold">{q?.volume?.toLocaleString?.()}</div>
      </div>
      <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
        <div className="text-zinc-400 text-sm">Symbol</div>
        <div className="text-2xl font-semibold">{q?.symbol}</div>
      </div>
    </div>
  );
}

// FILE: components/CandleChart.tsx
"use client";
import { createChart, ISeriesApi, Time } from "lightweight-charts";
import { useEffect, useRef } from "react";

export default function CandleChart({ data }: { data: any[] }) {
  const ref = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (!ref.current) return;
    const chart = createChart(ref.current, { height: 420, layout: { background: { color: "#0a0a0a" }, textColor: "#d4d4d8" }, grid: { vertLines: { color: "#18181b" }, horzLines: { color: "#18181b" } } });
    const series: ISeriesApi<"Candlestick"> = chart.addCandlestickSeries({ upColor: "#22c55e", downColor: "#ef4444", borderVisible: false, wickUpColor: "#22c55e", wickDownColor: "#ef4444" });
    series.setData((data || []).map((d) => ({ time: d.time as Time, open: d.open, high: d.high, low: d.low, close: d.close })));
    const ro = new ResizeObserver(() => chart.applyOptions({ width: ref.current!.clientWidth }));
    ro.observe(ref.current);
    return () => { ro.disconnect(); chart.remove(); };
  }, [JSON.stringify(data?.slice?.(-200))]); // why: keep updates cheap
  return <div ref={ref} className="w-full" />;
}

// FILE: components/AIInsights.tsx
"use client";
import useSWR from "swr";
import { useState } from "react";

const fetcher = (url: string) => fetch(url).then((r) => r.json());

export default function AIInsights({ symbol, quote }: { symbol: string; quote: any }) {
  const { data: news } = useSWR(`/api/news?symbol=${symbol}`, fetcher, { refreshInterval: 300000 });
  const [text, setText] = useState<string>("");
  const [loading, setLoading] = useState(false);

  async function run() {
    setLoading(true);
    try {
      const r = await fetch("/api/ai-analyze", { method: "POST", body: JSON.stringify({ symbol, quote, news: news?.data }) });
      const j = await r.json();
      setText(j.data || j.error);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <div className="text-sm text-zinc-400">AI Insights</div>
        <button onClick={run} disabled={loading} className="px-3 py-1.5 rounded-xl bg-indigo-600 disabled:opacity-60">{loading ? "Analyzing…" : "Analyze"}</button>
      </div>
      <textarea className="w-full h-48 bg-zinc-900 rounded-2xl p-3 border border-zinc-800" value={text} readOnly />
      <div className="text-xs text-zinc-500">AI is experimental and not financial advice.</div>
    </div>
  );
}

// FILE: app/page.tsx
"use client";
import useSWR from "swr";
import { useState, useMemo } from "react";
import TickerSearch from "@/components/TickerSearch";
import PriceBoard from "@/components/PriceBoard";
import CandleChart from "@/components/CandleChart";
import AIInsights from "@/components/AIInsights";

const fetcher = (url: string) => fetch(url).then((r) => r.json());

export default function Page() {
  const [symbol, setSymbol] = useState("AAPL");
  const { data: qres } = useSWR(`/api/quote?symbol=${symbol}`, fetcher, { refreshInterval: 5000 });
  const { data: cres } = useSWR(`/api/candles?symbol=${symbol}&interval=5min`, fetcher, { refreshInterval: 60000 });
  const quote = qres?.data;
  const candles = useMemo(() => cres?.data || [], [cres]);

  return (
    <main className="space-y-6">
      <h1 className="text-2xl font-semibold">AI Stock App</h1>
      <TickerSearch onSelect={setSymbol} />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-4">
          <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
            <CandleChart data={candles} />
          </div>
          <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
            <AIInsights symbol={symbol} quote={quote} />
          </div>
        </div>
        <div className="space-y-4">
          <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
            <PriceBoard q={quote} />
          </div>
          <div className="p-4 rounded-2xl bg-zinc-900 border border-zinc-800">
            <Watchlist symbol={symbol} onPick={setSymbol} />
          </div>
        </div>
      </div>
    </main>
  );
}

function Watchlist({ symbol, onPick }: { symbol: string; onPick: (s: string) => void }) {
  const [items, setItems] = useState<string[]>(() => {
    if (typeof window === "undefined") return ["AAPL", "MSFT", "GOOGL"];
    try { return JSON.parse(localStorage.getItem("wl") || "[\"AAPL\",\"MSFT\",\"GOOGL\"]"); } catch { return ["AAPL","MSFT","GOOGL"]; }
  });
  const [input, setInput] = useState("");
  function add() {
    const t = input.trim().toUpperCase();
    if (!t) return;
    const next = Array.from(new Set([t, ...items])).slice(0, 30);
    setItems(next); localStorage.setItem("wl", JSON.stringify(next)); setInput("");
  }
  function remove(t: string) {
    const next = items.filter((x) => x !== t); setItems(next); localStorage.setItem("wl", JSON.stringify(next));
  }
  return (
    <div className="space-y-3">
      <div className="flex items-center gap-2">
        <input className="flex-1 bg-zinc-900 rounded-2xl px-3 py-2 border border-zinc-800" placeholder="Add ticker" value={input} onChange={(e)=>setInput(e.target.value)} onKeyDown={(e)=> e.key==="Enter" && add()} />
        <button onClick={add} className="px-3 py-2 rounded-2xl bg-zinc-700">Add</button>
      </div>
      <ul className="space-y-2">
        {items.map((t) => (
          <li key={t} className={`flex items-center justify-between px-3 py-2 rounded-xl border ${t===symbol?"border-indigo-500 bg-indigo-500/10":"border-zinc-800 bg-zinc-900"}`}>
            <button onClick={() => onPick(t)} className="font-medium">{t}</button>
            <button onClick={() => remove(t)} className="text-xs text-zinc-400">remove</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

// FILE: .env.example
# DATA_PROVIDER=alphavantage
# DATA_API_KEY=demo
# OPENAI_API_KEY=sk-...

// FILE: README.md
# AI Stock App (Next.js)

## Local Setup
```bash
pnpm i # or npm i
pnpm dev
```
Visit http://localhost:3000

## Configure Providers
- Alpha Vantage (free, slow): set DATA_PROVIDER=alphavantage and DATA_API_KEY
- Polygon (paid): DATA_PROVIDER=polygon and DATA_API_KEY
- Stooq (no key, daily only): DATA_PROVIDER=stooq

## Deploy
### Vercel
1. `vercel init` or import the GitHub repo in Vercel
2. Add env vars: DATA_PROVIDER, DATA_API_KEY, OPENAI_API_KEY
3. Deploy. Serverless routes run on Vercel Functions

### Render
- Create a Web Service, build `npm run build`, start `npm start`; add env

### Squarespace
- Host this app on Vercel/Render, then embed in Squarespace using a Code Block iframe pointing to the deployed URL

### GitHub Pages
- Not ideal for serverless APIs. Either:
  - Move API routes to Vercel/Render and point the static site to those; or
  - Use Next static export and remove server features/AI

## Notes
- This project intentionally avoids scraping TradingView. Use your own market data provider and comply with their TOS.
- The AI endpoint summarizes context; it is **not** investment advice.
